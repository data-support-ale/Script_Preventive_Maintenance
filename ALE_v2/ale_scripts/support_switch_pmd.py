#!/usr/bin/env python3

import sys
import os
import json
from time import strftime, localtime
#import smtplib
#import mimetypes
import re
from support_tools_OmniSwitch import get_credentials, get_tech_support_sftp, get_file_sftp
from support_send_notification import *
import time
import datetime
import syslog

syslog.openlog('support_switch_core_dump')
syslog.syslog(syslog.LOG_INFO, "Executing script")

_runtime = strftime("%Y-%m-%d %H:%M:%S", localtime())

from pattern import set_rule_pattern, set_portnumber, set_decision, mysql_save

path = os.path.dirname(__file__)
print(os.path.abspath(os.path.join(path,os.pardir)))
sys.path.insert(1,os.path.abspath(os.path.join(path,os.pardir)))
from alelog import alelog

# Example of JSON content
#### {"@timestamp":"2021-11-10T09:42:02.867257+01:00","type":"syslog_json","relayip":"10.130.7.244","hostname":"OS6860N","message":"10:55:46.686 OS6860E-Core2 swlogd COREDUMPER  ALRM: Dumping core for task dpcmm","end_msg":""}
### {"@timestamp":"2021-11-10T09:42:02.867257+01:00","type":"syslog_json","relayip":"10.130.7.244","hostname":"OS6860N","message":"OS6860E-Core2 swlogd PMD main ALRT: PMD generated at /flash/pmd/pmd-agCmm-12.29.2020-11.26.28","end_msg":""}

# Variables
filename = 'tech_support_complete.tar'
filename_pmd = '/flash/pmd/pmd-xx'
appid = "unknown"

script_name = sys.argv[0]
runtime = strftime("%d_%b_%Y_%H_%M_%S", localtime())

uname = os.system('uname -a')
os.system('logger -t montag -p user.info Executing script ' + script_name)

pattern = sys.argv[1]
print(pattern)
set_rule_pattern(pattern)

switch_user, switch_password, mails, jid1, jid2, jid3, ip_server, login_AP, pass_AP, tech_pass,  company, room_id = get_credentials()

# Function called when Core Dump is observed
def pmd_issue(ipadd, jid1, jid2, jid3):
    os.system('logger -t montag -p user.info PMD Script - A Core DUMP is generated by switch: ' + ipadd[1])
    info = "Preventive Maintenance Application - A Core DUMP is generated by OmniSwitch {0} / {1}".format(host,ipadd)
    syslog.syslog(syslog.LOG_INFO, info)
    set_decision(ipadd, "4")
    send_alert(info, jid1, jid2, jid3, 'LAN - Core DUMP rule', 'Status: Alert Sent', company)
    try:
        mysql_save(runtime=_runtime, ip_address=ipadd, result='success', reason=info, exception='')
        syslog.syslog(syslog.LOG_INFO, "Statistics saved with no decision")    
    except UnboundLocalError as error:
        print(error)
        sys.exit()
    except Exception as error:
        print(error)
        pass         
 
def extract_ipadd():
    last = ""
    with open("/var/log/devices/lastlog_pmd.json", "r", errors='ignore') as log_file:
        for line in log_file:
            last = line

    with open("/var/log/devices/lastlog_pmd.json", "w", errors='ignore') as log_file:
        log_file.write(last)

    with open("/var/log/devices/lastlog_pmd.json", "r", errors='ignore') as log_file:
        log_json = json.load(log_file)
        ipadd = log_json["relayip"]
        host = log_json["hostname"]
        ipadd = str(ipadd)
        message_reason = log_json["message"]
        syslog.syslog(syslog.LOG_DEBUG, "Syslog IP Address: " + ipadd)
        syslog.syslog(syslog.LOG_DEBUG, "Syslog Hostname: " + host)
        l = []
        l.append('/code ')
        l.append(message_reason)
        message_reason = ''.join(l)
        print(ipadd)
    return ipadd, host, message_reason


def extract_pmd_path():
    last = ""
    with open("/var/log/devices/lastlog_pmd.json", "r", errors='ignore') as log_file:
        for line in log_file:
            last = line

    with open("/var/log/devices/lastlog_pmd.json", "w", errors='ignore') as log_file:
        log_file.write(last)

    with open("/var/log/devices/lastlog_pmd.json", "r", errors='ignore') as log_file:
        try:
            log_json = json.load(log_file)
            ipadd = log_json["relayip"]
            host = log_json["hostname"]
            message_reason = log_json["message"]
            l = []
            l.append('/code ')
            l.append(message_reason)
            message_reason = ''.join(l)
            syslog.syslog(syslog.LOG_DEBUG, "Syslog IP Address: " + ipadd)
            syslog.syslog(syslog.LOG_DEBUG, "Syslog Hostname: " + host)
            print(ipadd)
        except json.decoder.JSONDecodeError:
            print("File /var/log/devices/lastlog_pmd.json empty")
            syslog.syslog(syslog.LOG_INFO, "File /var/log/devices/lastlog_pmd.json - JSONDecodeError")
            exit()
        except IndexError:
            print("Index error in regex")
            syslog.syslog(syslog.LOG_INFO, "File /var/log/devices/lastlog_pmd.json - Index error in regex")
            exit()
        try:
            filename_pmd = re.findall(r"PMD generated at (.*)", message_reason)[0]
            if "flash" in filename_pmd:
                appid = re.findall(r"pmd-(.*)-",filename_pmd)[0]
                pattern = r'[0-9]'
                appid = re.sub(pattern, '', appid)
                syslog.syslog(syslog.LOG_INFO, "Core dump is noticed on appid: " + appid)
                appid = appid.replace('-..',"",2)
                print(appid)
            print(filename_pmd)
        except IndexError:
            print("Index error in regex when extracting appid")
            syslog.syslog(syslog.LOG_INFO, "File /var/log/devices/lastlog_pmd.json - Index error in regex when extracting appid")
            exit()
    return filename_pmd, message_reason, appid


print("Core DUMP - call function collecting log")
syslog.syslog(syslog.LOG_INFO, "Executing function extract_ipadd")
ipadd, host, message_reason = extract_ipadd()

set_portnumber("0")
set_decision(ipadd, "4")
if alelog.rsyslog_script_timeout(ipadd + host + pattern, time.time()):
    print("Less than 5 min")
    syslog.syslog(syslog.LOG_INFO, "Script executed within 5 minutes interval - script exit")
    exit(0)

### Notification Rainbow ###
syslog.syslog(syslog.LOG_INFO, "Executing function pmd_issue")
pmd_issue(ipadd, jid1, jid2, jid3)

### TECH-SUPPORT ENG COMPLETE ###
syslog.syslog(syslog.LOG_INFO, "Executing function get_tech_support_sftp")
get_tech_support_sftp(switch_user, switch_password, host, ipadd)
set_decision(ipadd, "4")
try:
    mysql_save(runtime=_runtime, ip_address=ipadd, result='success', reason="Tech-Support file downloaded from OmniSwitch", exception='')
    syslog.syslog(syslog.LOG_INFO, "Statistics saved with no decision")    
except UnboundLocalError as error:
    print(error)
    sys.exit()
except Exception as error:
    print(error)
    pass
### get PMD FILE ###
print("Starting collecting PMD file")
syslog.syslog(syslog.LOG_INFO, "Executing function extract_pmd_path")
filename_pmd, message_reason, appid = extract_pmd_path()
date = datetime.date.today()
syslog.syslog(syslog.LOG_INFO, "Executing function get_file_sftp")
localFilePath = filename_pmd.replace("/", "_")
localFilePath = ("/tftpboot/{0}_{1}_{2}").format(date, ipadd, localFilePath)
get_file_sftp(switch_user, switch_password, ipadd, filename_pmd, localFilePath)
set_decision(ipadd, "4")
try:
    mysql_save(runtime=_runtime, ip_address=ipadd, result='success', reason="Core Dump file downloaded from OmniSwitch", exception='')
    syslog.syslog(syslog.LOG_INFO, "Statistics saved with no decision")    
except UnboundLocalError as error:
    print(error)
    sys.exit()
except Exception as error:
    print(error)
    pass  

notif = ("Preventive Maintenance Application - A Core DUMP is generated by OmniSwitch {0} / {1} on function {2}.\nTech-support eng complete and PMD files are collected and stored in server.\nPlease contact ALE Customer Support team.").format(host, ipadd, appid)
syslog.syslog(syslog.LOG_INFO, "Notification: " + notif)
syslog.syslog(syslog.LOG_INFO, "Logs collected - Calling VNA API - Rainbow Adaptive Card")
send_message(notif)
syslog.syslog(syslog.LOG_INFO, "Logs collected - Notification sent")
set_decision(ipadd, "4")
try:
    mysql_save(runtime=_runtime, ip_address=ipadd, result='success', reason=notif, exception='')
    syslog.syslog(syslog.LOG_INFO, "Statistics saved with no decision")    
except UnboundLocalError as error:
    print(error)
    sys.exit()
except Exception as error:
    print(error)
    pass   
