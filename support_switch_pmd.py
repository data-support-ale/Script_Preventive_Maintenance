#!/usr/bin/env python

import sys
import os
import getopt
import json
import logging
import subprocess
from time import gmtime, strftime, localtime, sleep
import requests
import datetime
#import smtplib
#import mimetypes
import re
from support_tools_OmniSwitch import get_credentials,get_tech_support_sftp,get_pmd_file_sftp
from support_send_notification import send_message,send_file,send_alert
import pysftp
from database_conf import *

#### Example of JSON content
#### {"@timestamp":"2021-11-10T09:42:02.867257+01:00","type":"syslog_json","relayip":"10.130.7.244","hostname":"OS6860N","message":"10:55:46.686 OS6860E-Core2 swlogd COREDUMPER  ALRM: Dumping core for task dpcmm","end_msg":""}
### {"@timestamp":"2021-11-10T09:42:02.867257+01:00","type":"syslog_json","relayip":"10.130.7.244","hostname":"OS6860N","message":"OS6860E-Core2 swlogd PMD main ALRT: PMD generated at /flash/pmd/pmd-agCmm-12.29.2020-11.26.28","end_msg":""}

# Variables
filename = 'tech_support_complete.tar'
filename_pmd = '/flash/pmd/pmd-xx'

script_name = sys.argv[0]
runtime = strftime("%d_%b_%Y_%H_%M_%S", localtime())

uname = os.system('uname -a')
os.system('logger -t montag -p user.info Executing script ' + script_name)

switch_user,switch_password,mails,jid,ip_server,login_AP,pass_AP,tech_pass,random_id,company = get_credentials()


# Function called when Core Dump is observed
def pmd_issue(ipadd,jid):
  os.system('logger -t montag -p user.info PMD Script - A Core DUMP is generated by switch: ' + ipadd[1])
  info = "Switch: {0} - A Core DUMP is generated by switch".format(ipadd)
  send_alert(info,jid)
  try:
      write_api.write(bucket, org, [{"measurement": str(os.path.basename(__file__)), "tags": {"IP": ipadd}, "fields": {"count": 1}}])
  except UnboundLocalError as error:
      print(error)
      sys.exit()

def extract_ipadd():
   last = ""
   with open("/var/log/devices/lastlog_pmd.json", "r", errors='ignore') as log_file:
    for line in log_file:
        last = line

   with open("/var/log/devices/lastlog_pmd.json", "w", errors='ignore') as log_file:
    log_file.write(last)

   with open("/var/log/devices/lastlog_pmd.json", "r", errors='ignore') as log_file:
    log_json = json.load(log_file)
    ipadd = log_json["relayip"]
    host = log_json["hostname"]
    ipadd = str(ipadd)
    print(ipadd)
   return ipadd,host

def extract_pmd_path():
   last = ""
   with open("/var/log/devices/lastlog_pmd.json", "r", errors='ignore') as log_file:
    for line in log_file:
        last = line

   with open("/var/log/devices/lastlog_pmd.json", "w", errors='ignore') as log_file:
    log_file.write(last)

   with open("/var/log/devices/lastlog_pmd.json", "r", errors='ignore') as log_file:
    try:
        log_json = json.load(log_file)
        ipadd = log_json["relayip"]
        host = log_json["hostname"]
        msg = log_json["message"]
    except json.decoder.JSONDecodeError:
        print("File /var/log/devices/lastlog_pmd.json empty")
        exit()
    filename_pmd = re.findall(r"PMD generated at (.*)", msg)[0]
    print(filename_pmd)
   return filename_pmd,msg
  

print("Core DUMP - call function collecting log")

ipadd,host = extract_ipadd()

### Notification Rainbow ###
pmd_issue(ipadd,jid)

### TECH-SUPPORT ENG COMPLETE ###
get_tech_support_sftp(switch_user,switch_password,host,ipadd)

### get PMD FILE ###
print("Starting collecting PMD file")
filename_pmd,msg = extract_pmd_path()
filename_path = get_pmd_file_sftp(switch_user,switch_password,ipadd,filename_pmd)

if jid !='':
         info = "Tech-support eng complete and PMD files are collected and stored in /tftpboot/ on syslog server"
         send_message(info,jid)
         send_message(msg,jid)

sys.exit(0)
